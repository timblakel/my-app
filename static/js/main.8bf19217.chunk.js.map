{"version":3,"sources":["components/CardViewer.tsx","components/ControlPanel.tsx","utilities/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","isRevealed","Col","Body","Title","Text","front","back","ControlPanel","setCard","reveal","Button","onClick","items","CARDS","Math","floor","random","length","className","App","useState","activeCard","setActivecard","answerRevealed","setAnswerReavealed","Container","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAGO,SAASA,EAAT,GAAyF,IAApEC,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,WAC9B,OAAO,cAACC,EAAA,EAAD,UACP,cAAC,IAAD,UACI,eAAC,IAAcC,KAAf,WACI,cAAC,IAAcC,MAAf,0BACA,cAAC,IAAcC,KAAf,UACI,gCAAK,4CAAL,IAA8BL,EAAKM,WAEtCL,GAAc,cAAC,IAAcI,KAAf,UACX,gCAAK,2CAAL,IAA6BL,EAAKO,iB,YCP3C,SAASC,EAAT,GAAgJ,IAAzHC,EAAwH,EAAxHA,QAASC,EAA+G,EAA/GA,OAAQT,EAAuG,EAAvGA,WAM3C,OAAO,eAACC,EAAA,EAAD,WACP,+CACA,cAACS,EAAA,EAAD,CAAQC,QAPR,WCAG,IAA6BC,EDC5BJ,GCD4BI,EDCHC,GCAhBC,KAAKC,MAAMD,KAAKE,SAASJ,EAAMK,UDCxCR,GAAO,IAKqBS,UAAU,MAA1C,+BACA,cAACR,EAAA,EAAD,CAAQC,QAAS,kBAAMF,GAAQT,IAA/B,8B,0BEYWmB,MAjBf,WACE,MAAoCC,mBAAeP,EAAM,IAAzD,mBAAOQ,EAAP,KAAmBC,EAAnB,KACA,EAA6CF,oBAAkB,GAA/D,mBAAOG,EAAP,KAAuBC,EAAvB,KAEA,OACE,cAACC,EAAA,EAAD,CAAWP,UAAU,MAArB,SACE,eAACQ,EAAA,EAAD,WACE,cAACnB,EAAD,CACEC,QAASc,EACTb,OAAQe,EACRxB,WAAYuB,IACd,cAACzB,EAAD,CAAYC,KAAMsB,EAAYrB,WAAYuB,UCNnCI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8bf19217.chunk.js","sourcesContent":["import { Col, Card as BootstrapCard } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\n\r\nexport function CardViewer({card, isRevealed}: {card: Card, isRevealed: boolean}): JSX.Element {\r\n    return <Col>\r\n    <BootstrapCard>\r\n        <BootstrapCard.Body>\r\n            <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\r\n            <BootstrapCard.Text>\r\n                <div><strong>Front:</strong> {card.front}</div>\r\n            </BootstrapCard.Text>\r\n            {isRevealed && <BootstrapCard.Text>\r\n                <div><strong>Back:</strong> {card.back}</div>\r\n            </BootstrapCard.Text>}\r\n        </BootstrapCard.Body>\r\n    </BootstrapCard>\r\n\r\n    </Col>\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card }  from '../interfaces/card';\r\nimport CARDS from '../assets/cards.json';\r\nimport { getRandomElement } from '../utilities/data';\r\n\r\nexport function ControlPanel({setCard, reveal, isRevealed}: {setCard: (c: Card)=>void, reveal: (r: boolean)=>void, isRevealed: boolean}): JSX.Element {\r\n    function setRandomCard() {\r\n        setCard(getRandomElement(CARDS as Card[]))\r\n        reveal(false);\r\n    }\r\n\r\n    return <Col>\r\n    <h1>Control Panel</h1>\r\n    <Button onClick={setRandomCard} className=\"m-2\">Swap Current Card</Button>\r\n    <Button onClick={() => reveal(!isRevealed)}>Reveal Answer</Button>\r\n    </Col>\r\n}","\r\n/**\r\n * Grab a random element from a list\r\n * @param items Any kind of list\r\n * @returns Random item from list\r\n */\r\nexport function getRandomElement<T>(items: T[]): T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport CARDS from './assets/cards.json';\r\nimport { CardViewer } from './components/CardViewer';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport { Card } from './interfaces/card';\r\n\r\nfunction App(): JSX.Element {\r\n  const [activeCard, setActivecard] = useState<Card>(CARDS[0] as Card);\r\n  const [answerRevealed, setAnswerReavealed] = useState<boolean>(false);\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row>\r\n        <ControlPanel \r\n          setCard={setActivecard} \r\n          reveal={setAnswerReavealed}\r\n          isRevealed={answerRevealed}></ControlPanel>\r\n        <CardViewer card={activeCard} isRevealed={answerRevealed}></CardViewer>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}